{"version":3,"file":"static/js/554.0a4832ab.chunk.js","mappings":"gLACA,EAAwB,qB,SCGXA,EAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtB,OAAO,cAAGC,UAAWC,EAAd,SAA0BF,GAClC,C,0ICFYG,EAAS,mCAAG,WAAMC,GAAN,yFACAC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,4BAHb,qCAEa,cACjBE,EADiB,OAKjBC,EAAUD,EAASE,KAAKC,KALP,kBAOhBF,GAPgB,2CAAH,sD,4CCGhBG,EAAaC,EAAAA,GAAAA,GAAH,kEAKVC,EAAaD,EAAAA,GAAAA,GAAH,qHAgEhB,EAzDa,WACX,OAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaS,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,2FAC1BP,GAAa,GADa,kBAGEZ,EAAUgB,GAHZ,OAGlBI,EAHkB,OAIxBL,EAAQK,GAJgB,gDAMxBN,EAAS,KAAMO,SANS,yBAQxBT,GAAa,GARW,4EAAH,qDAWzBO,GACD,GAAE,CAACH,KAGF,iCACE,SAACT,EAAD,UACGD,EAAKgB,OAAS,EACXhB,EAAKiB,KAAI,SAAAC,GAAK,OACZ,UAACf,EAAD,WAC0B,OAAvBe,EAAMC,cACL,gBACEC,IAAI,yLACJC,IAAI,WACJC,MAAM,MACNC,OAAO,SAGT,gBACEH,IAAG,oCAA+BF,EAAMC,cACxCE,IAAG,UAAKH,EAAMM,MACdF,MAAM,MACNC,OAAO,SAIX,uBAAIL,EAAMM,QACV,0BACE,sCADF,IACqBN,EAAMO,eAnBZP,EAAMR,GADX,IAwBd,kDAELL,IAAa,SAACqB,EAAA,EAAD,IACbnB,IAAS,SAACjB,EAAA,EAAD,CAAOC,KAAK,0CAG3B,C","sources":["webpack://react-homework-template/./src/components/Error/Error.module.css?141d","components/Error/Error.jsx","services/fetchCast.jsx","pages/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Error_error__9uczQ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Error.module.css'\n\nexport const Error = ({ text }) => {\n  return <p className={css.error}>{text}</p>;\n};\n\nError.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\nconst key = 'dea2d79a9d2826570ce7fe158e8c2542';\n\nexport const fetchCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}`\n  );\n\n  const details = response.data.cast;\n\n  return details;\n};\n","import { useEffect, useState } from 'react';\nimport { fetchCast } from 'services/fetchCast';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader/Loader';\nimport { Error } from '../components/Error/Error';\nimport styled from 'styled-components';\n\nconst StyledList = styled.ul`\n  list-style: none;\n  margin-top: 15px;\n`;\n\nconst StyledItem = styled.li`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const handleMoviesRequest = async () => {\n      setIsLoading(true);\n      try {\n        const fetchedCast = await fetchCast(id);\n        setCast(fetchedCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    handleMoviesRequest();\n  }, [id]);\n\n  return (\n    <>\n      <StyledList>\n        {cast.length > 0\n          ? cast.map(actor => (\n              <StyledItem key={actor.id}>\n                {actor.profile_path === null ? (\n                  <img\n                    src=\"https://img.freepik.com/free-vector/illustration-camera-icon_53876-5563.jpg?w=900&t=st=1678486874~exp=1678487474~hmac=a4f04450d41b0500a3b50c9217530014aca806126c8517f7433768454ed1572d\"\n                    alt=\"No found\"\n                    width=\"25%\"\n                    height=\"25%\"\n                  />\n                ) : (\n                  <img\n                    src={`//image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                    alt={`${actor.name}`}\n                    width=\"25%\"\n                    height=\"25%\"\n                  />\n                )}\n\n                <p>{actor.name}</p>\n                <p>\n                  <b>Character:</b> {actor.character}\n                </p>\n              </StyledItem>\n            ))\n          : \"We don't have any informations about the cast\"}\n      </StyledList>\n      {isLoading && <Loader />}\n      {error && <Error text=\"An error occurred. Please try again\" />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["Error","text","className","css","fetchCast","movieId","axios","response","details","data","cast","StyledList","styled","StyledItem","useState","isLoading","setIsLoading","error","setError","setCast","id","useParams","useEffect","handleMoviesRequest","fetchedCast","message","length","map","actor","profile_path","src","alt","width","height","name","character","Loader"],"sourceRoot":""}